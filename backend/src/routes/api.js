import pkg from 'express'
import bcrypt from 'bcrypt'
import jwt from 'jsonwebtoken'
import moment from 'moment'
import {User, News} from './MongoModels.js'

const {Router}=pkg
const router = Router()
//Generated by www.allkeysgenerator.com
const

router.post('/generatenews', async (req, res) => {
  await News.create({username:"test", news:["news1","news2","news3"]})
})

router.post('/news', async (req, res) => {
  const {user} = req.body
  const response = await News.findOne({username:user})
  res.send({news: response.news })
})

router.get('/servertime', async (req, res) => {
  var time= moment().local()
  res.send({ time})
})

router.post('/login', async (req, res, next) => {
  const {username, password} = req.body
  const user = await User.findOne({username}).select('+password')
  if(!user){
    res.json({msg: 'No such user'})
    next("No such user")
  } else{
    const match = await bcrypt.compare(password, user.password)
    if(!match){
      res.json({msg: 'Wrong password'})
      next()
    } else{
      const token = await jwt.sign({userId: user.id},TOKEN_SECRET,{
      expiresIn: '1m'
    })
    res.cookie('auth', token, {httpOnly:true})
    res.json({msg: token, success:true})
    }
  }
})

router.post('/register', async (req, res, next) => {
  const{username, password}=req.body
  const user = await User.findOne({ username})
  if(user){
    res.json({msg: 'already exists'})
    next('User exists')
  } else{
    //argon2 for extra protecion... -> it was, but heroku said NOPE :'(
    const hashed = await bcrypt.hash(password, 10)
    const Created = await User.create({username, password: hashed, payed: false})
    res.json({msg: Created.id})
  }
})

const authMW =async(req, res, next)=>{
  console.log("in authMW")
  try {
      //const token = req.headers?.authorization?.replace('Bearer ', '')
      const token = req.cookies.auth
      jwt.verify(token, TOKEN_SECRET)
      next()
  } catch (error) {
    console.log("error at authMW")
    next(error)
  }
}

router.get('/checklogin', authMW, async (req, res, next)=>{
  res.json({msg: true})
})

router.post('/membersndues', authMW, async (req, res, next)=>{
  const{user}=req.body
  const userFromDB = await User.findOne({username:user}).select('+payed')
  var response = (userFromDB.payed)
  res.json({msg: response})
  next()
})

router.put('/pay', authMW, async (req, res, next)=>{
  const{user}=req.body
  const userFromDB = await User.findOne({username:user}).select('+payed')
  if(userFromDB.payed===true){
    await User.findOneAndUpdate({username:user, payed:false})
  } else{
    await User.findOneAndUpdate({username:user, payed:true})
  }
  const userFromDB2 = await User.findOne({username:user}).select('+payed')
  res.json({msg: userFromDB2.payed})
  next()
})


router.delete('/deleteme', authMW, async (req, res, next)=>{
  const{user}=req.body
  await User.findOneAndDelete({username:user})
  await User.findOne({username:user}).select('+payed')
  res.json({msg: "successfully"})
  next()
})

router.get('/csrf-protection', async (req, res) => {
  res.json({csrfToken: req.csrfToken()})
})

export default router
